# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Live cd
function lfcd() {
	tmp="$(mktemp)"
	lf -last-dir-path="$tmp" "$@"
	if [ -f "$tmp" ]; then
		dir="$(cat "$tmp")"
		rm -f "$tmp"
		[ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
	fi
}
bindkey -s '^o' 'lfcd\n'


# Find unique in files
function findu() {
	if [ $# -eq 2 ]; then
		find . -type f -iname "$1" -print0 | xargs -0 grep -ohi "\w*$2*\w*" | sort | uniq
	else
		echo "Need two parameters: 1) file mask for 'find' (e.g. '*.R') and 2) text to search (e.g. 'limma::')"
	fi
}

#WEBSITEDIR="${HOME}/Documents/Private/GitHub/vanNijnatten.dev"
function bpost() {
	if [ $# -eq 0 ]; then
		echo "Enter the name of the note as the argument"
	else
		TITLE="$@"
		AUTHOR="`whoami`"
		DATE=`date +"%Y-%m-%d %H:%M"`
		EXT="md"
		PREPEND="`date +%Y-%m-%d`-"
		SLUG=$(echo -n "${TITLE}" | sed -e 's/[^[:alnum:]]/-/g' | tr -s '-' | tr A-Z a-z)
		FILE="${WEBSITEDIR}/_posts/${PREPEND}${SLUG}.${EXT}"
		if [[ "${TITLE:0:1}" == "2" ]]; then
			TITLE=${TITLE:11};
		fi
		
		if [[ ! -f "$FILE" ]]; then
			echo -e "---\nlayout: post\ntitle:  \"${TITLE}\"\nauthor: \"${AUTHOR}\"\ndate:   ${DATE}\ncategories: blog\ntags:   blog technique\n---\n\n**$@**\n" > "$FILE"
		fi
		
		vim -c 'startinsert' "${FILE}"
	fi
}

# Open GitHub directory
function gh() {
	select item in $(cdgh; find . -mindepth 1 -type d -iname ".git" | sed -e "s/\/\.git$//g" | sort);
	do
		open "$GITHUBDIR/$item" -a Atom.app
		break
	done
}

# Pull every repository in the gitHub directory
function ghpull() {
	pushd "$GITHUBDIR" > /dev/null
	for DIR in */; do
		pushd "$DIR"
		if [ -d ".git" ] && [ -n "$(ls -A .git)" ]; then
			git config pull.ff only
			git pull
		fi
		popd 1> /dev/null
	done
	popd 1> /dev/null
}

# Pull every repository in the gitHub directory
function gpull() {
	find . -mindepth 1 -maxdepth 3 -type d -iname ".git" -print0 | while IFS= read -r -d '' dir; do
		pushd "$dir/.."
			git config pull.ff only 1> /dev/null
			git pull  1> /dev/null
		popd 1> /dev/null
	done
}

# Push every repository in the gitHub directory
function ghpush() {
	pushd "$GITHUBDIR" > /dev/null
	for DIR in */; do
		pushd "$DIR"
		if [ -d ".git" ] && [ -n "$(ls -A .git)" ]; then
			git push  1> /dev/null;
		fi
		popd 1> /dev/null
	done
	popd 1> /dev/null
}

# Push every repository in the gitHub directory
function gpull() {
	find . -mindepth 1 -maxdepth 3 -type d -iname ".git" -print0 | while IFS= read -r -d '' dir; do
		pushd "$dir/.."
			git push  1> /dev/null;
		popd 1> /dev/null
	done
}


# Make a tree from the current directory
function tree() {
	find . | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"
}

